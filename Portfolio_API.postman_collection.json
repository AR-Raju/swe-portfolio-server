{
  "info": {
    "_postman_id": "portfolio-api-collection",
    "name": "Portfolio API",
    "description": "Complete API collection for the Portfolio Backend Server with authentication, CRUD operations for all modules, and proper request examples.",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{auth_token}}",
        "type": "string"
      }
    ]
  },
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [""]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [""]
      }
    }
  ],
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:5000/api",
      "type": "string"
    },
    {
      "key": "auth_token",
      "value": "",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "üîê Authentication",
      "item": [
        {
          "name": "Register Admin",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    console.log('Admin registered successfully:', response.data.name);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"Admin User\",\n    \"email\": \"admin@portfolio.com\",\n    \"password\": \"admin123456\",\n    \"role\": \"admin\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/auth/register",
              "host": ["{{base_url}}"],
              "path": ["auth", "register"]
            },
            "description": "Register a new admin user. Only admin role is supported."
          },
          "response": []
        },
        {
          "name": "Login",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.environment.set('auth_token', response.data.token);",
                  "    pm.collectionVariables.set('auth_token', response.data.token);",
                  "    console.log('Login successful. Token saved.');",
                  "    console.log('User:', response.data.user.name);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"admin@portfolio.com\",\n    \"password\": \"admin123456\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/auth/login",
              "host": ["{{base_url}}"],
              "path": ["auth", "login"]
            },
            "description": "Login with admin credentials. Token will be automatically saved for subsequent requests."
          },
          "response": []
        },
        {
          "name": "Get Current User",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{auth_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/auth/me",
              "host": ["{{base_url}}"],
              "path": ["auth", "me"]
            },
            "description": "Get current authenticated user information."
          },
          "response": []
        },
        {
          "name": "Change Password",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{auth_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"oldPassword\": \"admin123456\",\n    \"newPassword\": \"newpassword123\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/auth/change-password",
              "host": ["{{base_url}}"],
              "path": ["auth", "change-password"]
            },
            "description": "Change user password."
          },
          "response": []
        },
        {
          "name": "Logout",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/auth/logout",
              "host": ["{{base_url}}"],
              "path": ["auth", "logout"]
            },
            "description": "Logout user and clear cookies."
          },
          "response": []
        }
      ],
      "description": "Authentication endpoints for admin login/logout and user management."
    },
    {
      "name": "üë§ Profile",
      "item": [
        {
          "name": "Get Profile",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/profile",
              "host": ["{{base_url}}"],
              "path": ["profile"]
            },
            "description": "Get current profile information. Public endpoint."
          },
          "response": []
        },
        {
          "name": "Update Profile",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{auth_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"designation\": \"Full Stack Developer\",\n    \"introduction\": \"Passionate full-stack developer with 5+ years of experience in building scalable web applications using modern technologies like React, Node.js, and MongoDB. I love creating efficient, user-friendly solutions that solve real-world problems.\",\n    \"resumeUrl\": \"https://example.com/resume.pdf\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/profile",
              "host": ["{{base_url}}"],
              "path": ["profile"]
            },
            "description": "Update profile information. Requires admin authentication."
          },
          "response": []
        }
      ],
      "description": "Profile management endpoints."
    },
    {
      "name": "üéì Education",
      "item": [
        {
          "name": "Get All Education",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/education?limit=10&page=1&sort=-createdAt",
              "host": ["{{base_url}}"],
              "path": ["education"],
              "query": [
                {
                  "key": "limit",
                  "value": "10"
                },
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "sort",
                  "value": "-createdAt"
                }
              ]
            },
            "description": "Get all education records with pagination and sorting. Public endpoint."
          },
          "response": []
        },
        {
          "name": "Create Education",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('education_id', response.data._id);",
                  "    console.log('Education created with ID:', response.data._id);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{auth_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"institution\": \"University of Technology\",\n    \"degree\": \"Bachelor of Science in Computer Science\",\n    \"period\": \"2018 - 2022\",\n    \"description\": \"Graduated with honors. Specialized in software engineering and web development. Completed capstone project on e-commerce platform development.\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/education",
              "host": ["{{base_url}}"],
              "path": ["education"]
            },
            "description": "Create a new education record. Requires admin authentication."
          },
          "response": []
        },
        {
          "name": "Get Single Education",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/education/{{education_id}}",
              "host": ["{{base_url}}"],
              "path": ["education", "{{education_id}}"]
            },
            "description": "Get a specific education record by ID."
          },
          "response": []
        },
        {
          "name": "Update Education",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{auth_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"institution\": \"University of Technology (Updated)\",\n    \"degree\": \"Bachelor of Science in Computer Science\",\n    \"period\": \"2018 - 2022\",\n    \"description\": \"Graduated magna cum laude. Specialized in software engineering and web development. Completed capstone project on e-commerce platform development using MERN stack.\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/education/{{education_id}}",
              "host": ["{{base_url}}"],
              "path": ["education", "{{education_id}}"]
            },
            "description": "Update an existing education record."
          },
          "response": []
        },
        {
          "name": "Delete Education",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{auth_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/education/{{education_id}}",
              "host": ["{{base_url}}"],
              "path": ["education", "{{education_id}}"]
            },
            "description": "Delete an education record."
          },
          "response": []
        }
      ],
      "description": "Education management endpoints."
    },
    {
      "name": "üíº Experience",
      "item": [
        {
          "name": "Get All Experience",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/experience?limit=10&page=1&sort=-createdAt",
              "host": ["{{base_url}}"],
              "path": ["experience"],
              "query": [
                {
                  "key": "limit",
                  "value": "10"
                },
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "sort",
                  "value": "-createdAt"
                }
              ]
            },
            "description": "Get all work experience records."
          },
          "response": []
        },
        {
          "name": "Create Experience",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('experience_id', response.data._id);",
                  "    console.log('Experience created with ID:', response.data._id);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{auth_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"company\": \"Tech Solutions Inc.\",\n    \"position\": \"Senior Full Stack Developer\",\n    \"duration\": \"Jan 2022 - Present\",\n    \"description\": \"Led development of multiple web applications using React, Node.js, and MongoDB. Mentored junior developers and implemented CI/CD pipelines. Improved application performance by 40% through code optimization and database indexing.\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/experience",
              "host": ["{{base_url}}"],
              "path": ["experience"]
            },
            "description": "Create a new work experience record."
          },
          "response": []
        },
        {
          "name": "Get Single Experience",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/experience/{{experience_id}}",
              "host": ["{{base_url}}"],
              "path": ["experience", "{{experience_id}}"]
            },
            "description": "Get a specific experience record by ID."
          },
          "response": []
        },
        {
          "name": "Update Experience",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{auth_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"company\": \"Tech Solutions Inc.\",\n    \"position\": \"Lead Full Stack Developer\",\n    \"duration\": \"Jan 2022 - Present\",\n    \"description\": \"Led development of multiple web applications using React, Node.js, and MongoDB. Mentored junior developers and implemented CI/CD pipelines. Improved application performance by 40% through code optimization and database indexing. Architected microservices infrastructure.\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/experience/{{experience_id}}",
              "host": ["{{base_url}}"],
              "path": ["experience", "{{experience_id}}"]
            },
            "description": "Update an existing experience record."
          },
          "response": []
        },
        {
          "name": "Delete Experience",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{auth_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/experience/{{experience_id}}",
              "host": ["{{base_url}}"],
              "path": ["experience", "{{experience_id}}"]
            },
            "description": "Delete an experience record."
          },
          "response": []
        }
      ],
      "description": "Work experience management endpoints."
    },
    {
      "name": "üõ†Ô∏è Skills",
      "item": [
        {
          "name": "Get All Skills",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/skills?limit=20&category=Frontend",
              "host": ["{{base_url}}"],
              "path": ["skills"],
              "query": [
                {
                  "key": "limit",
                  "value": "20"
                },
                {
                  "key": "category",
                  "value": "Frontend"
                }
              ]
            },
            "description": "Get all skills with optional filtering by category."
          },
          "response": []
        },
        {
          "name": "Create Skill",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('skill_id', response.data._id);",
                  "    console.log('Skill created with ID:', response.data._id);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{auth_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"React.js\",\n    \"level\": \"Expert\",\n    \"category\": \"Frontend\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/skills",
              "host": ["{{base_url}}"],
              "path": ["skills"]
            },
            "description": "Create a new skill. Level options: Beginner, Intermediate, Advanced, Expert."
          },
          "response": []
        },
        {
          "name": "Create Multiple Skills",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{auth_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "[\n    {\n        \"name\": \"Node.js\",\n        \"level\": \"Expert\",\n        \"category\": \"Backend\"\n    },\n    {\n        \"name\": \"MongoDB\",\n        \"level\": \"Advanced\",\n        \"category\": \"Database\"\n    },\n    {\n        \"name\": \"TypeScript\",\n        \"level\": \"Advanced\",\n        \"category\": \"Programming Language\"\n    },\n    {\n        \"name\": \"Docker\",\n        \"level\": \"Intermediate\",\n        \"category\": \"DevOps\"\n    }\n]"
            },
            "url": {
              "raw": "{{base_url}}/skills",
              "host": ["{{base_url}}"],
              "path": ["skills"]
            },
            "description": "Example of creating multiple skills (Note: You'll need to call the endpoint multiple times as the API creates one skill at a time)."
          },
          "response": []
        },
        {
          "name": "Get Single Skill",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/skills/{{skill_id}}",
              "host": ["{{base_url}}"],
              "path": ["skills", "{{skill_id}}"]
            },
            "description": "Get a specific skill by ID."
          },
          "response": []
        },
        {
          "name": "Update Skill",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{auth_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"React.js\",\n    \"level\": \"Expert\",\n    \"category\": \"Frontend Framework\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/skills/{{skill_id}}",
              "host": ["{{base_url}}"],
              "path": ["skills", "{{skill_id}}"]
            },
            "description": "Update an existing skill."
          },
          "response": []
        },
        {
          "name": "Delete Skill",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{auth_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/skills/{{skill_id}}",
              "host": ["{{base_url}}"],
              "path": ["skills", "{{skill_id}}"]
            },
            "description": "Delete a skill."
          },
          "response": []
        }
      ],
      "description": "Skills management endpoints."
    },
    {
      "name": "üöÄ Projects",
      "item": [
        {
          "name": "Get All Projects",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/projects?limit=10&featured=true&status=completed",
              "host": ["{{base_url}}"],
              "path": ["projects"],
              "query": [
                {
                  "key": "limit",
                  "value": "10"
                },
                {
                  "key": "featured",
                  "value": "true"
                },
                {
                  "key": "status",
                  "value": "completed"
                }
              ]
            },
            "description": "Get all projects with optional filtering by featured status and completion status."
          },
          "response": []
        },
        {
          "name": "Create Project",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('project_id', response.data._id);",
                  "    console.log('Project created with ID:', response.data._id);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{auth_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"E-Commerce Platform\",\n    \"shortDescription\": \"Full-stack e-commerce solution with modern UI and secure payment processing.\",\n    \"detailedDescription\": \"A comprehensive e-commerce platform built with React, Node.js, and MongoDB. Features include user authentication, product catalog, shopping cart, order management, payment integration with Stripe, admin dashboard, and responsive design. Implemented advanced features like real-time inventory tracking, email notifications, and analytics dashboard.\",\n    \"techStack\": [\"React\", \"Node.js\", \"Express\", \"MongoDB\", \"Stripe\", \"JWT\", \"Tailwind CSS\"],\n    \"images\": [\n        \"https://example.com/project1-screenshot1.jpg\",\n        \"https://example.com/project1-screenshot2.jpg\"\n    ],\n    \"links\": {\n        \"live\": \"https://ecommerce-demo.vercel.app\",\n        \"github\": \"https://github.com/username/ecommerce-platform\",\n        \"demo\": \"https://youtube.com/watch?v=demo\"\n    },\n    \"featured\": true,\n    \"status\": \"completed\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/projects",
              "host": ["{{base_url}}"],
              "path": ["projects"]
            },
            "description": "Create a new project. Status options: completed, in-progress, planned."
          },
          "response": []
        },
        {
          "name": "Get Single Project",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/projects/{{project_id}}",
              "host": ["{{base_url}}"],
              "path": ["projects", "{{project_id}}"]
            },
            "description": "Get detailed information about a specific project."
          },
          "response": []
        },
        {
          "name": "Update Project",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{auth_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"Advanced E-Commerce Platform\",\n    \"shortDescription\": \"Full-stack e-commerce solution with modern UI, secure payment processing, and AI recommendations.\",\n    \"detailedDescription\": \"A comprehensive e-commerce platform built with React, Node.js, and MongoDB. Features include user authentication, product catalog, shopping cart, order management, payment integration with Stripe, admin dashboard, responsive design, and AI-powered product recommendations. Implemented advanced features like real-time inventory tracking, email notifications, analytics dashboard, and multi-vendor support.\",\n    \"techStack\": [\"React\", \"Node.js\", \"Express\", \"MongoDB\", \"Stripe\", \"JWT\", \"Tailwind CSS\", \"Redis\", \"Socket.io\"],\n    \"featured\": true,\n    \"status\": \"completed\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/projects/{{project_id}}",
              "host": ["{{base_url}}"],
              "path": ["projects", "{{project_id}}"]
            },
            "description": "Update an existing project."
          },
          "response": []
        },
        {
          "name": "Delete Project",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{auth_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/projects/{{project_id}}",
              "host": ["{{base_url}}"],
              "path": ["projects", "{{project_id}}"]
            },
            "description": "Delete a project."
          },
          "response": []
        }
      ],
      "description": "Project portfolio management endpoints."
    },
    {
      "name": "üìù Blog",
      "item": [
        {
          "name": "Get All Blog Posts",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/blogs?limit=10&status=published&featured=true",
              "host": ["{{base_url}}"],
              "path": ["blogs"],
              "query": [
                {
                  "key": "limit",
                  "value": "10"
                },
                {
                  "key": "status",
                  "value": "published"
                },
                {
                  "key": "featured",
                  "value": "true"
                }
              ]
            },
            "description": "Get all blog posts with filtering options."
          },
          "response": []
        },
        {
          "name": "Create Blog Post",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('blog_slug', response.data.slug);",
                  "    console.log('Blog post created with slug:', response.data.slug);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{auth_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"title\": \"Building Scalable APIs with Node.js and Express\",\n    \"content\": \"# Building Scalable APIs with Node.js and Express\\n\\nIn this comprehensive guide, we'll explore the best practices for building scalable and maintainable APIs using Node.js and Express.js.\\n\\n## Table of Contents\\n1. Setting up the project structure\\n2. Implementing middleware\\n3. Database integration\\n4. Error handling\\n5. Authentication and authorization\\n6. Testing strategies\\n\\n## 1. Setting up the project structure\\n\\nA well-organized project structure is crucial for maintainability...\\n\\n## 2. Implementing middleware\\n\\nMiddleware functions are the backbone of Express applications...\\n\\n## Conclusion\\n\\nBuilding scalable APIs requires careful planning and implementation of best practices. By following the guidelines outlined in this article, you'll be well on your way to creating robust and maintainable backend services.\",\n    \"excerpt\": \"Learn how to build scalable and maintainable APIs using Node.js and Express.js with best practices, proper project structure, and comprehensive error handling.\",\n    \"category\": \"Backend Development\",\n    \"tags\": [\"Node.js\", \"Express\", \"API\", \"Backend\", \"JavaScript\"],\n    \"featuredImage\": \"https://example.com/blog-nodejs-api.jpg\",\n    \"status\": \"published\",\n    \"featured\": true,\n    \"seoTitle\": \"Building Scalable APIs with Node.js and Express - Complete Guide\",\n    \"seoDescription\": \"Comprehensive guide on building scalable APIs with Node.js and Express. Learn best practices, project structure, middleware, and error handling.\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/blogs",
              "host": ["{{base_url}}"],
              "path": ["blogs"]
            },
            "description": "Create a new blog post. Slug will be auto-generated from title."
          },
          "response": []
        },
        {
          "name": "Get Single Blog Post",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/blogs/{{blog_slug}}",
              "host": ["{{base_url}}"],
              "path": ["blogs", "{{blog_slug}}"]
            },
            "description": "Get a specific blog post by slug. This will increment the view count."
          },
          "response": []
        },
        {
          "name": "Update Blog Post",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{auth_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"title\": \"Building Scalable APIs with Node.js and Express - Updated\",\n    \"content\": \"# Building Scalable APIs with Node.js and Express - Updated Edition\\n\\nIn this comprehensive and updated guide, we'll explore the latest best practices for building scalable and maintainable APIs using Node.js and Express.js.\\n\\n## What's New in This Update\\n- Latest Node.js features\\n- Modern authentication patterns\\n- Performance optimization techniques\\n\\n## Table of Contents\\n1. Setting up the project structure\\n2. Implementing middleware\\n3. Database integration\\n4. Error handling\\n5. Authentication and authorization\\n6. Testing strategies\\n7. Performance optimization (NEW)\\n8. Deployment strategies (NEW)\\n\\n[Rest of the content...]\\n\\n## Conclusion\\n\\nBuilding scalable APIs requires careful planning and implementation of best practices. This updated guide includes the latest techniques and patterns for 2024.\",\n    \"status\": \"published\",\n    \"featured\": true\n}"
            },
            "url": {
              "raw": "{{base_url}}/blogs/{{blog_slug}}",
              "host": ["{{base_url}}"],
              "path": ["blogs", "{{blog_slug}}"]
            },
            "description": "Update an existing blog post."
          },
          "response": []
        },
        {
          "name": "Delete Blog Post",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{auth_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/blogs/{{blog_slug}}",
              "host": ["{{base_url}}"],
              "path": ["blogs", "{{blog_slug}}"]
            },
            "description": "Delete a blog post."
          },
          "response": []
        }
      ],
      "description": "Blog management endpoints."
    },
    {
      "name": "üìû Contact",
      "item": [
        {
          "name": "Get Contact Settings",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/contact/settings",
              "host": ["{{base_url}}"],
              "path": ["contact", "settings"]
            },
            "description": "Get current contact information. Public endpoint."
          },
          "response": []
        },
        {
          "name": "Update Contact Settings",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{auth_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"phone\": \"+1 (555) 123-4567\",\n    \"email\": \"contact@johndoe.dev\",\n    \"address\": \"San Francisco, CA, USA\",\n    \"socialLinks\": {\n        \"linkedin\": \"https://linkedin.com/in/johndoe\",\n        \"github\": \"https://github.com/johndoe\",\n        \"twitter\": \"https://twitter.com/johndoe\",\n        \"instagram\": \"https://instagram.com/johndoe.dev\"\n    }\n}"
            },
            "url": {
              "raw": "{{base_url}}/contact/settings",
              "host": ["{{base_url}}"],
              "path": ["contact", "settings"]
            },
            "description": "Update contact settings. Requires admin authentication."
          },
          "response": []
        },
        {
          "name": "Send Contact Message",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('message_id', response.data._id);",
                  "    console.log('Message sent with ID:', response.data._id);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"Jane Smith\",\n    \"email\": \"jane.smith@example.com\",\n    \"subject\": \"Collaboration Opportunity\",\n    \"message\": \"Hi! I came across your portfolio and I'm really impressed with your work. I'd love to discuss a potential collaboration opportunity for a project I'm working on. Would you be available for a brief call this week? Looking forward to hearing from you!\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/contact/message",
              "host": ["{{base_url}}"],
              "path": ["contact", "message"]
            },
            "description": "Send a contact message. This will also send an email notification. Rate limited to 3 requests per 15 minutes per IP."
          },
          "response": []
        },
        {
          "name": "Get All Contact Messages",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{auth_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/contact/messages?limit=20&status=unread&sort=-createdAt",
              "host": ["{{base_url}}"],
              "path": ["contact", "messages"],
              "query": [
                {
                  "key": "limit",
                  "value": "20"
                },
                {
                  "key": "status",
                  "value": "unread"
                },
                {
                  "key": "sort",
                  "value": "-createdAt"
                }
              ]
            },
            "description": "Get all contact messages with filtering options. Admin only."
          },
          "response": []
        },
        {
          "name": "Get Single Contact Message",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{auth_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/contact/messages/{{message_id}}",
              "host": ["{{base_url}}"],
              "path": ["contact", "messages", "{{message_id}}"]
            },
            "description": "Get a specific contact message by ID."
          },
          "response": []
        },
        {
          "name": "Update Message Status",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{auth_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"status\": \"read\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/contact/messages/{{message_id}}",
              "host": ["{{base_url}}"],
              "path": ["contact", "messages", "{{message_id}}"]
            },
            "description": "Update message status. Options: unread, read, replied."
          },
          "response": []
        },
        {
          "name": "Delete Contact Message",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{auth_token}}",
                  "type": "string"
                }
              ]
            },
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/contact/messages/{{message_id}}",
              "host": ["{{base_url}}"],
              "path": ["contact", "messages", "{{message_id}}"]
            },
            "description": "Delete a contact message."
          },
          "response": []
        }
      ],
      "description": "Contact management endpoints including settings and message handling."
    },
    {
      "name": "üìÅ File Upload",
      "item": [
        {
          "name": "Upload Image",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "image",
                  "type": "file",
                  "src": []
                }
              ]
            },
            "url": {
              "raw": "{{base_url}}/upload",
              "host": ["{{base_url}}"],
              "path": ["upload"]
            },
            "description": "Upload an image file to ImageBB. Returns the image URL for use in other endpoints."
          },
          "response": []
        }
      ],
      "description": "File upload endpoints for images and documents."
    },
    {
      "name": "üè• Health Check",
      "item": [
        {
          "name": "Root Health Check",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/../../",
              "host": ["{{base_url}}"],
              "path": ["..", "..", ""]
            },
            "description": "Basic health check endpoint to verify the API is running."
          },
          "response": []
        },
        {
          "name": "Detailed Health Check",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/../health",
              "host": ["{{base_url}}"],
              "path": ["..", "health"]
            },
            "description": "Detailed health check with database connection status."
          },
          "response": []
        }
      ],
      "description": "Health check endpoints to verify API status."
    }
  ]
}
